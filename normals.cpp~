#include "mex.h"
#include <cmath>

/* Matlab equivalent

[FNx, FNy, FNz]=normals(Fa, Fb, Fc, Vx, Vy, Vz)

*/


// mex wrapper
void mexFunction( int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{

//inputs
double *Fa1, *Fb1, *Fc1, *Vx1, *Vy1, *Vz1;

//outputs
double *FNx, *FNy, *FNz;

//other variables
//dimensions
const mwSize *FDim, *VDim;
int FacesN=0;

// Counter
int ii;

//Check for correct number of arguments
if(nrhs!=6)
    mexErrMsgTxt("6 inputs needed")
else if(nlhs!=3)
    mexErrMsgTxt("3 outputs needed")
    
//Read inputs
Fa1=mxGetPr(prhs[0]);
Fb1=mxGetPr(prhs[1]);
Fc1=mxGetPr(prhs[2]);
Vx1=mxGetPr(prhs[3]);
Vx2=mxGetPr(prhs[4]);
Vx3=mxGetPr(prhs[5]);

// number of faces and vertices
FDim=mxGetDimensions(prhs[0]);
FacesN=FDim[0]*FDim[1];
VDim=mxGetDimensions(prhs[3]);

//Create output arrays
plhs[0]=mxCreateNumericArray(1, FDim, mxDOUBLE_CLASS, mxREAL);
plhs[1]=mxCreateNumericArray(1, FDim, mxDOUBLE_CLASS, mxREAL);
plhs[2]=mxCreateNumericArray(1, FDim, mxDOUBLE_CLASS, mxREAL);
FNx=mxGetPr(plhs[0]);
FNy=xmGetPr(plhs[1]);
FNz=mxGetPr(plhs[2]);

for (i=0; ii<FacesN; i++) {



}



}
